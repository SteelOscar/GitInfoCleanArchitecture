package ru.steeloscar.gitinfocleanarchitecture.datasource

import ru.steeloscar.gitinfocleanarchitecture.data.repository.api.model.UserRepository
import ru.steeloscar.gitinfocleanarchitecture.domain.entity.UserRepositoryEntity
import ru.steeloscar.gitinfocleanarchitecture.presentation.model.UserRepositoryUI

object TestDataSourceUserRepository {

    fun getUserRepositories(): ArrayList<UserRepository> {
        return arrayListOf(
            UserRepository(
                1,
                "node_id1",
                "name1",
                "full_name1",
                false,
                UserRepository.Owner(
                    "login1",
                    1,
                    "node_id1",
                    "avatar_url1",
                    "gravatar_id1",
                    "url1",
                    "html_url1",
                    "followers_url1",
                    "following_url1",
                    "gists_url1",
                    "starred_url1",
                    "subs_url1",
                    "org_url1",
                    "repos_url1",
                    "events_url1",
                    "received_url1",
                    "type1",
                    false
                ),
                "html_url1",
                "descr1",
                false,
                "url1",
                "forks_url1",
                "keys_url1",
                "collaborations_url1",
                "teams_url1",
                "hooks_url1",
                "issue_url1",
                "events_url1",
                "assignees_url1",
                "branches_url1",
                "tags_url1",
                "blobs_url1",
                "git_tags_url1",
                "git_refs_url1",
                "trees_utl1",
                "statuses_url1",
                "languages_url1",
                "stargazers_url1",
                "contributors_url1",
                "subscribes_url1",
                "subscription_url1",
                "commits_url1",
                "git_commit_url1",
                "comments_url1",
                "issue_comment_url1",
                "contents_url1",
                "compare_url1",
                "merges_url1",
                "archive_url1",
                "downloads_url1",
                "issues_url1",
                "pulls_url1",
                "milestones_url1",
                "notifications_url1",
                "labels_url1",
                "releases_url1",
                "deployments_url1",
                "created_at1",
                "updated_at1",
                "pushed_at1",
                "git_url1",
                "ssh_url1",
                "clone_url1",
                "svn_url1",
                null,
                1,
                1,
                1,
                null,
                has_issues = false,
                has_projects = false,
                has_downloads = false,
                has_wiki = false,
                has_pages = false,
                forks_count = 1,
                mirror_url = null,
                archived = false,
                disabled = false,
                open_issues_count = 1,
                license = UserRepository.License(
                    "apache_2.0",
                    "Apache License 2.0",
                    "Apache_2.0",
                    "url",
                    "node_id"
                ),
                forks = 1,
                open_issues = 1,
                watchers = 1,
                default_branch = "master",
                permissions = UserRepository.Permissions(
                    admin = true,
                    push = true,
                    pull = true
                )
            ),
            UserRepository(
                2,
                "node_id2",
                "name2",
                "full_name2",
                false,
                UserRepository.Owner(
                    "login2",
                    2,
                    "node_id2",
                    "avatar_url2",
                    "gravatar_id2",
                    "url2",
                    "html_url2",
                    "followers_url2",
                    "following_url2",
                    "gists_url2",
                    "starred_url2",
                    "subs_url2",
                    "org_url2",
                    "repos_url2",
                    "events_url2",
                    "received_url2",
                    "type2",
                    false
                ),
                "html_url2",
                "descr2",
                false,
                "url1",
                "forks_url2",
                "keys_url2",
                "collaborations_url2",
                "teams_url2",
                "hooks_url2",
                "issue_url2",
                "events_url2",
                "assignees_url2",
                "branches_url2",
                "tags_url2",
                "blobs_url2",
                "git_tags_url2",
                "git_refs_url2",
                "trees_utl2",
                "statuses_url2",
                "languages_url2",
                "stargazers_url2",
                "contributors_url2",
                "subscribes_url2",
                "subscription_url2",
                "commits_url2",
                "git_commit_url2",
                "comments_url2",
                "issue_comment_url2",
                "contents_url2",
                "compare_url2",
                "merges_url2",
                "archive_url2",
                "downloads_url2",
                "issues_url2",
                "pulls_url2",
                "milestones_url2",
                "notifications_url2",
                "labels_url2",
                "releases_url2",
                "deployments_url2",
                "created_at2",
                "updated_at2",
                "pushed_at2",
                "git_url2",
                "ssh_url2",
                "clone_url2",
                "svn_url2",
                null,
                2,
                2,
                2,
                null,
                has_issues = false,
                has_projects = false,
                has_downloads = false,
                has_wiki = false,
                has_pages = false,
                forks_count = 1,
                mirror_url = null,
                archived = false,
                disabled = false,
                open_issues_count = 2,
                license = UserRepository.License(
                    "apache_2.0",
                    "Apache License 2.0",
                    "Apache_2.0",
                    "url",
                    "node_id"
                ),
                forks = 2,
                open_issues = 2,
                watchers = 2,
                default_branch = "master",
                permissions = UserRepository.Permissions(
                    admin = true,
                    push = true,
                    pull = true
                )
            )
        )
    }

    fun getUserRepositoryEntities(): ArrayList<UserRepositoryEntity> {
        return arrayListOf(
            UserRepositoryEntity(
                "full_name1",
                forkRepo = false,
                archivedRepo = false,
                privateRepo = false,
                starCnt = 1,
                watchCnt = 1,
                language = null,
                createdDate = "created_at1",
                updateDate = "updated_at1",
                sizeRepo = 1,
                descriptionRepo = "descr1",
                ownerLogin = "login1",
                name = "name1"
            ),
            UserRepositoryEntity(
                "full_name2",
                forkRepo = false,
                archivedRepo = false,
                privateRepo = false,
                starCnt = 2,
                watchCnt = 2,
                language = null,
                createdDate = "created_at2",
                updateDate = "updated_at2",
                sizeRepo = 2,
                descriptionRepo = "descr2",
                ownerLogin = "login2",
                name = "name2"
            )
        )
    }

    fun getUserRepositoriesUI(): ArrayList<UserRepositoryUI> {
        return arrayListOf(
            UserRepositoryUI(
                "full_name1",
                forkRepo = false,
                archivedRepo = false,
                privateRepo = false,
                starCnt = 1,
                watchCnt = 1,
                language = null,
                createdDate = "created_at1",
                updateDate = "updated_at1",
                sizeRepo = 1,
                descriptionRepo = "descr1"
            ),
            UserRepositoryUI(
                "full_name2",
                forkRepo = false,
                archivedRepo = false,
                privateRepo = false,
                starCnt = 2,
                watchCnt = 2,
                language = null,
                createdDate = "created_at2",
                updateDate = "updated_at2",
                sizeRepo = 2,
                descriptionRepo = "descr2"
            )
        )
    }
}